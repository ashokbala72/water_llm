import streamlit as st
from mock_water_llm_engine import *
st.set_page_config(layout="wide")
st.title("💧 Water LLM Simulator – Full Demo****")
tab1, tab2 = st.tabs(["🚨 Mock Simulation", "🔮 Forecast Simulation"])
with tab1:
    st.header("🚨 Mock High-Risk Simulation****")
    st.subheader("🌩️ Simulate MET Storm Alert****")
    if st.button("🚨 Trigger MET Storm Scenario**"):
        st.markdown("""<div style="background-color:#e8f0fe;padding:6px;border-radius:6px"><strong>🛠️ Calling Function: storm_response_coordinator()</strong></div>""", unsafe_allow_html=True)
        storm_result = storm_response_coordinator(location="London****")
        st.success("✅ Storm Response Triggered (MOCK)****")
        st.markdown("### 🔎 Summary Overview****")
        st.markdown(f"**Location**: {storm_result['location']}****")
        st.markdown(f"**Risk Level**: `{storm_result['risk_level']}`****")
        st.markdown(f"**Overflow Predicted**: `{storm_result['overflow_predicted']}`****")
        st.markdown(f"**Control Action Taken**: `{storm_result['control_result']}`****")
        st.markdown(f"**Alert Sent**: {storm_result['alert_sent']}****")
        st.markdown("""<div style="background-color:#e8f0fe;padding:6px;border-radius:6px"><strong>🛠️ Calling Function: get_real_time_inputs()</strong></div>""", unsafe_allow_html=True)
        st.markdown("### 📊 Sensor Inputs****")
        st.json(storm_result["inputs"])
        st.markdown("""<div style="background-color:#e8f0fe;padding:6px;border-radius:6px"><strong>🛠️ Calling Function: dynamic_control_advice()</strong></div>""", unsafe_allow_html=True)
        st.markdown("### ⚙️ Control Advisory****")
        st.markdown(f"**Control Suggestion**: `{storm_result['control_advice']}`****")
        st.markdown("""<div style="background-color:#e8f0fe;padding:6px;border-radius:6px"><strong>🛠️ Calling Function: generate_genai_advisory()</strong></div>""", unsafe_allow_html=True)
        st.markdown("### 🧠 GenAI Advisory****")
        st.markdown(f"**GenAI Advisory**: `{storm_result['genai_advisory']}`****")
        st.markdown("""<div style="background-color:#e8f0fe;padding:6px;border-radius:6px"><strong>🛠️ Calling Function: generate_regulatory_report()</strong></div>""", unsafe_allow_html=True)
        st.markdown("### 📋 Regulatory Report****")
        st.code(storm_result["regulatory_report"], language="text****")
        st.markdown("""<div style="background-color:#e8f0fe;padding:6px;border-radius:6px"><strong>🛠️ Calling Function: detect_anomalies()</strong></div>""", unsafe_allow_html=True)
        st.markdown("### 🚨 Anomalies Detected****")
        st.markdown(f"**Detected Anomalies**: `{storm_result['anomalies']}`****")
        st.markdown("""<div style="background-color:#e8f0fe;padding:6px;border-radius:6px"><strong>🛠️ Calling Function: recommend_infrastructure_upgrades()</strong></div>""", unsafe_allow_html=True)
        st.markdown("### 🏗️ Infrastructure Upgrade Recommendation****")
        st.markdown(f"**Recommended Infrastructure Upgrades**: `{storm_result['infra_upgrades']}`****")
        
        st.subheader("🌦️ Simulated Weather Data****")
        st.markdown("""<div style="background-color:#e8f0fe;padding:6px;border-radius:6px"><strong>🛠️ Calling Function: fetch_weather_data()</strong></div>""", unsafe_allow_html=True)
        weather = fetch_weather_data("London****")
        st.json(weather)
        
        st.markdown("""<div style="background-color:#e8f0fe;padding:6px;border-radius:6px"><strong>🛠️ Calling Function: get_real_time_inputs()</strong></div>""", unsafe_allow_html=True)
        inputs = get_real_time_inputs()
        st.json(inputs)
        
        rainfall = inputs.get("rainfall_mm", 0)
        tank_level = inputs.get("tank_fill_percent", 0)
        st.markdown("""<div style="background-color:#e8f0fe;padding:6px;border-radius:6px"><strong>🛠️ Calling Function: calculate_overflow_risk()</strong></div>""", unsafe_allow_html=True)
        risk = calculate_overflow_risk(rainfall, tank_level)
        st.warning(f"Calculated Overflow Risk: {risk}****")
        sensor_data = {
        "tank_sensor": {"reading": inputs.get("tank_fill_percent", 0)},
        "rain_sensor": {"reading": inputs.get("rainfall_mm", 0)}
        }
        st.markdown("""<div style="background-color:#e8f0fe;padding:6px;border-radius:6px"><strong>🛠️ Calling Function: detect_anomalies()</strong></div>""", unsafe_allow_html=True)
        anomalies = detect_anomalies(sensor_data)
        st.error(f"Anomalies: {anomalies}****")
        
        st.markdown("""<div style="background-color:#e8f0fe;padding:6px;border-radius:6px"><strong>🛠️ Calling Function: predict_overflow()</strong></div>""", unsafe_allow_html=True)
        prediction = predict_overflow(rainfall, tank_level)
        st.info(f"Overflow Prediction: {prediction}****")
        
        st.markdown("""<div style="background-color:#e8f0fe;padding:6px;border-radius:6px"><strong>🛠️ Calling Function: dynamic_control_advice()</strong></div>""", unsafe_allow_html=True)
        control = dynamic_control_advice(tank_level)
        st.info(f"Control Advice: {control}****")
        st.markdown("""<div style="background-color:#e8f0fe;padding:6px;border-radius:6px"><strong>🛠️ Calling Function: overflow_control()</strong></div>""", unsafe_allow_html=True)
        control_action = overflow_control(location="London****")
        st.subheader("🛠️ Overflow Control Triggered****")
        st.table({
        "Rainfall (mm)": control_action["rain_mm"],
        "Tank Fill (%)": control_action["tank_fill_percent"],
        "Risk Level": control_action["risk"],
        "Action": control_action["action"]["command"] if isinstance(control_action["action"], dict) else control_action["action"],
        "Advisory": control_action["advisory"]
        })
        
        st.markdown("""<div style="background-color:#e8f0fe;padding:6px;border-radius:6px"><strong>🛠️ Calling Function: actuate_asset()</strong></div>""", unsafe_allow_html=True)
        asset_action = actuate_asset("open_valve****")
        st.write(f"Asset Actuated: {asset_action}****")
        
        st.markdown("""<div style="background-color:#e8f0fe;padding:6px;border-radius:6px"><strong>🛠️ Calling Function: predict_overflow()</strong></div>""", unsafe_allow_html=True)
        overflow_triggered = predict_overflow(inputs.get("rainfall_mm", 0), inputs.get("tank_fill_percent", 0))
        st.markdown("""<div style="background-color:#e8f0fe;padding:6px;border-radius:6px"><strong>🛠️ Calling Function: compliance_check()</strong></div>""", unsafe_allow_html=True)
        compliance = compliance_check(inputs.get("rainfall_mm", 0), overflow_triggered)
        st.warning(f"Compliance: {compliance}****")
        st.subheader("🧠 Full System Analysis****")
        st.markdown("""<div style="background-color:#e8f0fe;padding:6px;border-radius:6px"><strong>🛠️ Calling Function: run_all_analyses()</strong></div>""", unsafe_allow_html=True)
        full_analysis = run_all_analyses(location="London****")
        st.write("Inputs:****")
        st.json(full_analysis["inputs"])
        st.write("Risk Level:", full_analysis["overflow_risk"])
        st.write("Anomalies:", full_analysis["anomalies"])
        st.write("Compliance:", full_analysis["compliance"])
        st.write("Recommendations:", full_analysis["recommendations"])
        st.write("Advisory:", full_analysis["advisory"])
        st.markdown("""<div style="background-color:#e8f0fe;padding:6px;border-radius:6px"><strong>🛠️ Calling Function: generate_regulatory_report()</strong></div>""", unsafe_allow_html=True)
        report = generate_regulatory_report()
        st.code(report)
        
        st.markdown("""<div style="background-color:#e8f0fe;padding:6px;border-radius:6px"><strong>🛠️ Calling Function: alert_operator()</strong></div>""", unsafe_allow_html=True)
        alert = alert_operator("HIGH RISK****")
        st.info(f"Operator Alert: {alert}****")
        
        st.markdown("""<div style="background-color:#e8f0fe;padding:6px;border-radius:6px"><strong>🛠️ Calling Function: suggest_action_for_risk()</strong></div>""", unsafe_allow_html=True)
        suggestion = suggest_action_for_risk("HIGH****")
        st.success(f"Suggested Action: {suggestion}****")
with tab2:
    st.header("🔮 Forecast-Based Simulation (GPT-4.0 Powered)****")
st.subheader("🌦️ Simulated Weather Data****")
st.markdown("""<div style="background-color:#e8f0fe;padding:6px;border-radius:6px"><strong>🛠️ Calling Function: fetch_weather_data()</strong></div>""", unsafe_allow_html=True)
weather = fetch_weather_data("London****")
st.json(weather)
st.subheader("📡 Forecast and Risk Assessment****")

st.markdown("""<div style="background-color:#e8f0fe;padding:6px;border-radius:6px"><strong>🛠️ Calling Function: forecast_risk_assessment()</strong></div>""", unsafe_allow_html=True)
forecast = forecast_risk_assessment()
st.code(forecast)
st.markdown("""<div style="background-color:#e8f0fe;padding:6px;border-radius:6px"><strong>🛠️ Calling Function: get_real_time_inputs()</strong></div>""", unsafe_allow_html=True)
inputs = get_real_time_inputs()
rainfall = inputs.get("rainfall_mm", 0)
tank_level = inputs.get("tank_fill_percent", 0)
st.markdown("""<div style="background-color:#e8f0fe;padding:6px;border-radius:6px"><strong>🛠️ Calling Function: calculate_overflow_risk()</strong></div>""", unsafe_allow_html=True)
risk = calculate_overflow_risk(rainfall, tank_level)
st.warning(f"Risk (forecast mode): {risk}****")
st.markdown("""<div style="background-color:#e8f0fe;padding:6px;border-radius:6px"><strong>🛠️ Calling Function: overflow_control()</strong></div>""", unsafe_allow_html=True)
action = overflow_control(location="London****")
st.table({
"Rainfall (mm)": action["rain_mm"],
"Tank Fill (%)": action["tank_fill_percent"],
"Risk Level": action["risk"],
"Action": action["action"]["command"] if isinstance(action["action"], dict) else action["action"],
"Advisory": action["advisory"]
})
st.markdown("""<div style="background-color:#e8f0fe;padding:6px;border-radius:6px"><strong>🛠️ Calling Function: recommend_infrastructure_upgrades()</strong></div>""", unsafe_allow_html=True)
upgrades = recommend_infrastructure_upgrades()
st.write("Recommendations:****")
st.json(upgrades)
st.subheader("🧠 Forecast-Based Overflow Prediction****")
st.markdown("""<div style="background-color:#e8f0fe;padding:6px;border-radius:6px"><strong>🛠️ Calling Function: predict_overflow()</strong></div>""", unsafe_allow_html=True)
prediction = predict_overflow(rainfall, tank_level)
st.info(f"Predicted Overflow: {prediction}****")
st.subheader("⚙️ Forecast Dynamic Control Advice****")
st.markdown("""<div style="background-color:#e8f0fe;padding:6px;border-radius:6px"><strong>🛠️ Calling Function: dynamic_control_advice()</strong></div>""", unsafe_allow_html=True)
control_advice = dynamic_control_advice(tank_level)
st.info(f"Control Suggestion: {control_advice}****")
st.subheader("📋 Forecast Compliance Check****")
st.markdown("""<div style="background-color:#e8f0fe;padding:6px;border-radius:6px"><strong>🛠️ Calling Function: compliance_check()</strong></div>""", unsafe_allow_html=True)
compliance = compliance_check(rainfall, prediction)
st.warning(f"Compliance Status: {compliance}****")
st.subheader("📊 Forecast Full System Analysis****")
st.markdown("""<div style="background-color:#e8f0fe;padding:6px;border-radius:6px"><strong>🛠️ Calling Function: run_all_analyses()</strong></div>""", unsafe_allow_html=True)
full_analysis = run_all_analyses(location="London****")
st.write("Inputs:****")
st.json(full_analysis["inputs"])
st.write("Risk Level:", full_analysis["overflow_risk"])
st.write("Anomalies:", full_analysis["anomalies"])
st.write("Compliance:", full_analysis["compliance"])
st.write("Recommendations:", full_analysis["recommendations"])
st.write("Advisory:", full_analysis["advisory"])
st.subheader("📄 Forecast Regulatory Report****")
st.markdown("""<div style="background-color:#e8f0fe;padding:6px;border-radius:6px"><strong>🛠️ Calling Function: generate_regulatory_report()</strong></div>""", unsafe_allow_html=True)
report = generate_regulatory_report(location="London", rain=rainfall, risk_level=full_analysis["overflow_risk"])
st.code(report)
st.subheader("📢 Forecast Alert to Operator****")
st.markdown("""<div style="background-color:#e8f0fe;padding:6px;border-radius:6px"><strong>🛠️ Calling Function: alert_operator()</strong></div>""", unsafe_allow_html=True)
alert = alert_operator("HIGH RISK FROM FORECAST****")
st.info(f"Alert Sent: {alert}****")
st.subheader("💡 Forecast-Based Risk Advisory****")
st.markdown("""<div style="background-color:#e8f0fe;padding:6px;border-radius:6px"><strong>🛠️ Calling Function: suggest_action_for_risk()</strong></div>""", unsafe_allow_html=True)
suggestion = suggest_action_for_risk("HIGH****")
st.success(f"Recommended Action: {suggestion}****")